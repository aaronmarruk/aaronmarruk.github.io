---
title:  "Getting started with Clojure and Quil"
date:   2018-02-10 10:18:00
description: Up and running with the Quil library for Clojure
---

I’ve been making an effort recently to learn some Generative Art / Design skills. Generative Art / Design is essentially the process of using algorithms as part of either art or design processes. 

One of the most popular ways to get into this field is using the [Processing](https://processing.org/) development environment.

While Processing is an excellent resource for learning the fundamental skills for creating generative art, I really don't like using Java, which is the language used in the Processing IDE.
There are some alternatives to using Java with Processing – including a [Python version](https://py.processing.org/), and a browser-based [Javascript version](http://processingjs.org/) – and recently I came across some interesting artists who use [Clojure](https://clojure.org/) for generative art.

I’ve had a cursory interest in Clojure for the past couple years (I’ve tried to read the [Clojure for the brave and true](https://www.braveclojure.com/) book a couple times) and interestingly there’s a port of Processing for Clojure by the way of [Quil](https://github.com/quil/quil). I decided to try it.

### Install Java
The first thing you will need to do is install Java, if that's not installed already. You can check you have Java installed by running:

```
java -version
```

If you are on a Mac you should already have that installed.

### Install Leiningen

[Leiningen](https://leiningen.org/) is Clojure's build management tool. You should install that now:

```
curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > lein
sudo mkdir -p /usr/local/bin/
sudo mv lein /usr/local/bin/lein
sudo chmod a+x /usr/local/bin/lein
export PATH=$PATH:/usr/local/bin
```

Then run:
```
lein run
```

```
Downloading Leiningen to /Users/aaron/.lein/self-installs/leiningen-2.8.1-standalone.jar now...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-100   618    0   618    0     0   1291      0 --:--:-- --:--:-- --:--:--  1292
  0 12.9M    0     0    0     0      0      0 --:--:--  0:00:0  3 12.9M    3  508k    0     0   254k      0  0:00:51  0:00:0 21 12.9M   21 2855k    0     0   952k      0  0:00:13  0:00:0 62 12.9M   62 8278k    0     0  2070k      0  0:00:06  0:00:0100 12.9M  100 12.9M    0     0  2901k      0  0:00:04  0:00:04 --:--:-- 3735k
Leiningen 2.8.1 on Java 1.8.0_131 Java HotSpot(TM) 64-Bit Server VM
```

### Create a project

Once this has been done you will be able to use `Leiningen` to create a new Quil project.

```
lein new quil my-sketch
cd my-sketch
```

The `lein` command is used to scaffold new Clojure projects. You can see the result of that command by running `ls` inside the project directory:

```
ls
LICENSE		README.md 	project.clj	    src		target
```

Of interest is the `src` directory. This is where will will write our Clojure code. The `target` directory contains compiled Clojure code, meanwhile the `project.clj` file contains some configuration for the project.

Go ahead and run the new Quil project:

```
lein run
```

This throws an error: `No :main namespace specified in project.clj.`. This is trying to tell us that Clojure cannot find the main namespace (my-sketch.core), which is defined in `src/my_sketch/core.clj`. At the top of the file you should see the namespace declaration, something like:

```
(ns my-sketch.core)
```

To fix the ‘no main namespace’ error, we need to add a line to `project.clj` to point Clojure at the main namespace which was generated by Leiningen (why it doesn’t do this automatically I don’t know). `project.clj` should look like:

```
(defproject my-sketch "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.8.0"]
                 [quil "2.6.0"]]
  :main my-sketch.core)
```

Now if you run the sketch you will see another error: 

```
java.lang.Exception: Cannot find anything to run for: my-sketch.core
```

Essentially, when Clojure starts the application it looks for an entry point, a function called `-main`. We created the definition for this in `project.clj` but the actual `-main` function doesn’t exist yet. To fix this, I’ve create a new function, `-main` which wraps and calls the generated `defsketch` method in `src/my_sketch/core.clj`. The new function looks something like:

```
(defn -main 
  []
  (q/defsketch my-sketch
    :title "You spin my circle right round"
    :size [500 500]
    ; setup function called only once, during sketch initialization.
    :setup setup
    ; update-state is called on each iteration before draw-state.
    :update update-state
    :draw draw-state
    :features [:keep-on-top]
    ; This sketch uses functional-mode middleware.
    ; Check quil wiki for more info about middlewares and particularly
    ; fun-mode.
    :middleware [m/fun-mode]))
```

Now when running `lein run` the sketch loads without throwing any nasty looking errors in the console! Happy days. 

### Conclusion 
This has been a very quick peak at installing Clojure and it’s package manager Leiningen. I haven’t gone into too much detail about running sketches but we did fix a couple of initial bugs which are apparent when running the generated sketch files.

I’ve really enjoyed applying some basic knowledge of Clojure to my interests in generative art, and it’s interesting to hear what others have been doing with Clojure. I’m hoping to develop these skills further and who knows, I might actually create some nice art!